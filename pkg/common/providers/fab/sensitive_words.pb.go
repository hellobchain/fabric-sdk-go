// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orderer/sensitive_words.proto

package fab

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SensitiveWord struct {
	// sensitiveWord
	SensitiveWords []byte `protobuf:"bytes,1,opt,name=sensitiveWords,proto3" json:"sensitiveWords,omitempty"`
	// sensitiveWord delm
	Delm                 string   `protobuf:"bytes,2,opt,name=delm,proto3" json:"delm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensitiveWord) Reset()         { *m = SensitiveWord{} }
func (m *SensitiveWord) String() string { return proto.CompactTextString(m) }
func (*SensitiveWord) ProtoMessage()    {}
func (*SensitiveWord) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2b9dcb1175f72, []int{0}
}

func (m *SensitiveWord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensitiveWord.Unmarshal(m, b)
}
func (m *SensitiveWord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensitiveWord.Marshal(b, m, deterministic)
}
func (m *SensitiveWord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensitiveWord.Merge(m, src)
}
func (m *SensitiveWord) XXX_Size() int {
	return xxx_messageInfo_SensitiveWord.Size(m)
}
func (m *SensitiveWord) XXX_DiscardUnknown() {
	xxx_messageInfo_SensitiveWord.DiscardUnknown(m)
}

var xxx_messageInfo_SensitiveWord proto.InternalMessageInfo

func (m *SensitiveWord) GetSensitiveWords() []byte {
	if m != nil {
		return m.SensitiveWords
	}
	return nil
}

func (m *SensitiveWord) GetDelm() string {
	if m != nil {
		return m.Delm
	}
	return ""
}

type ExcludedSymbol struct {
	// excludedSymbol
	ExcludedSymbols      []byte   `protobuf:"bytes,1,opt,name=excludedSymbols,proto3" json:"excludedSymbols,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExcludedSymbol) Reset()         { *m = ExcludedSymbol{} }
func (m *ExcludedSymbol) String() string { return proto.CompactTextString(m) }
func (*ExcludedSymbol) ProtoMessage()    {}
func (*ExcludedSymbol) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2b9dcb1175f72, []int{1}
}

func (m *ExcludedSymbol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExcludedSymbol.Unmarshal(m, b)
}
func (m *ExcludedSymbol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExcludedSymbol.Marshal(b, m, deterministic)
}
func (m *ExcludedSymbol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExcludedSymbol.Merge(m, src)
}
func (m *ExcludedSymbol) XXX_Size() int {
	return xxx_messageInfo_ExcludedSymbol.Size(m)
}
func (m *ExcludedSymbol) XXX_DiscardUnknown() {
	xxx_messageInfo_ExcludedSymbol.DiscardUnknown(m)
}

var xxx_messageInfo_ExcludedSymbol proto.InternalMessageInfo

func (m *ExcludedSymbol) GetExcludedSymbols() []byte {
	if m != nil {
		return m.ExcludedSymbols
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_51a2b9dcb1175f72, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SensitiveWord)(nil), "orderer.sensitiveWord")
	proto.RegisterType((*ExcludedSymbol)(nil), "orderer.excludedSymbol")
	proto.RegisterType((*Empty)(nil), "orderer.empty")
}

func init() { proto.RegisterFile("orderer/sensitive_words.proto", fileDescriptor_51a2b9dcb1175f72) }

var fileDescriptor_51a2b9dcb1175f72 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc9, 0x2f, 0x4a, 0x49,
	0x2d, 0x4a, 0x2d, 0xd2, 0x2f, 0x4e, 0xcd, 0x2b, 0xce, 0x2c, 0xc9, 0x2c, 0x4b, 0x0d, 0xcf, 0x2f,
	0x4a, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0xca, 0x2a, 0x79, 0x73, 0xf1,
	0xa2, 0x28, 0x10, 0x52, 0xe3, 0xe2, 0x43, 0xd5, 0x21, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13, 0x84,
	0x26, 0x2a, 0x24, 0xc4, 0xc5, 0x92, 0x92, 0x9a, 0x93, 0x2b, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x19,
	0x04, 0x66, 0x2b, 0x59, 0x71, 0xf1, 0xa5, 0x56, 0x24, 0xe7, 0x94, 0xa6, 0xa4, 0xa6, 0x04, 0x57,
	0xe6, 0x26, 0xe5, 0xe7, 0x08, 0x69, 0x70, 0xf1, 0xa3, 0x8a, 0xc0, 0x8c, 0x43, 0x17, 0x56, 0x62,
	0xe7, 0x62, 0x4d, 0xcd, 0x2d, 0x28, 0xa9, 0x34, 0x5a, 0xcf, 0xcc, 0xc5, 0x1b, 0x8c, 0xe2, 0x24,
	0x3b, 0x2e, 0xa1, 0xc0, 0xd2, 0xd4, 0xa2, 0x4a, 0x54, 0x51, 0x3e, 0x3d, 0xa8, 0x1f, 0xf4, 0xc0,
	0xfa, 0xa4, 0xc4, 0xe0, 0x7c, 0x14, 0x97, 0x2a, 0x31, 0x08, 0xb9, 0x70, 0x09, 0x38, 0xa6, 0xa4,
	0xa0, 0xea, 0xc6, 0xa1, 0x1a, 0xbf, 0x29, 0xc1, 0xa9, 0x25, 0x94, 0x9a, 0xe2, 0xc0, 0x25, 0x0c,
	0xf6, 0x8b, 0x2b, 0x6a, 0x38, 0xa1, 0x7b, 0x46, 0x1c, 0xc1, 0x47, 0x51, 0xa8, 0xc4, 0x20, 0xe4,
	0xce, 0x25, 0xe8, 0x98, 0x92, 0x82, 0xa6, 0x1f, 0x97, 0x7a, 0x02, 0x06, 0x05, 0xa7, 0x96, 0x50,
	0x6e, 0x90, 0x93, 0x3b, 0x97, 0x7c, 0x72, 0x7e, 0xae, 0x5e, 0x41, 0x66, 0x5e, 0x7a, 0x62, 0x9e,
	0x5e, 0x5a, 0x66, 0x6e, 0x62, 0x05, 0x24, 0x99, 0x15, 0xc3, 0xf4, 0x44, 0xa9, 0x40, 0x25, 0x93,
	0xf3, 0x73, 0xf5, 0xc1, 0x0a, 0xf4, 0x93, 0xf3, 0x8b, 0x52, 0xf5, 0x21, 0xaa, 0xf4, 0xa1, 0xaa,
	0x92, 0xd8, 0xc0, 0x7c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0x71, 0xf2, 0xcd, 0xbc,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SensitiveWordClient is the client API for SensitiveWord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensitiveWordClient interface {
	QuerySensitiveWord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SensitiveWord, error)
	AddSensitiveWord(ctx context.Context, in *SensitiveWord, opts ...grpc.CallOption) (*SensitiveWord, error)
	SetSensitiveWord(ctx context.Context, in *SensitiveWord, opts ...grpc.CallOption) (*SensitiveWord, error)
	QueryExcludedSymbol(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExcludedSymbol, error)
	AddExcludedSymbol(ctx context.Context, in *ExcludedSymbol, opts ...grpc.CallOption) (*ExcludedSymbol, error)
	SetExcludedSymbol(ctx context.Context, in *ExcludedSymbol, opts ...grpc.CallOption) (*ExcludedSymbol, error)
}

type sensitiveWordClient struct {
	cc *grpc.ClientConn
}

func NewSensitiveWordClient(cc *grpc.ClientConn) SensitiveWordClient {
	return &sensitiveWordClient{cc}
}

func (c *sensitiveWordClient) QuerySensitiveWord(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SensitiveWord, error) {
	out := new(SensitiveWord)
	err := c.cc.Invoke(ctx, "/orderer.SensitiveWord/QuerySensitiveWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensitiveWordClient) AddSensitiveWord(ctx context.Context, in *SensitiveWord, opts ...grpc.CallOption) (*SensitiveWord, error) {
	out := new(SensitiveWord)
	err := c.cc.Invoke(ctx, "/orderer.SensitiveWord/AddSensitiveWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensitiveWordClient) SetSensitiveWord(ctx context.Context, in *SensitiveWord, opts ...grpc.CallOption) (*SensitiveWord, error) {
	out := new(SensitiveWord)
	err := c.cc.Invoke(ctx, "/orderer.SensitiveWord/SetSensitiveWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensitiveWordClient) QueryExcludedSymbol(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ExcludedSymbol, error) {
	out := new(ExcludedSymbol)
	err := c.cc.Invoke(ctx, "/orderer.SensitiveWord/QueryExcludedSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensitiveWordClient) AddExcludedSymbol(ctx context.Context, in *ExcludedSymbol, opts ...grpc.CallOption) (*ExcludedSymbol, error) {
	out := new(ExcludedSymbol)
	err := c.cc.Invoke(ctx, "/orderer.SensitiveWord/AddExcludedSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensitiveWordClient) SetExcludedSymbol(ctx context.Context, in *ExcludedSymbol, opts ...grpc.CallOption) (*ExcludedSymbol, error) {
	out := new(ExcludedSymbol)
	err := c.cc.Invoke(ctx, "/orderer.SensitiveWord/SetExcludedSymbol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensitiveWordServer is the server API for SensitiveWord service.
type SensitiveWordServer interface {
	QuerySensitiveWord(context.Context, *Empty) (*SensitiveWord, error)
	AddSensitiveWord(context.Context, *SensitiveWord) (*SensitiveWord, error)
	SetSensitiveWord(context.Context, *SensitiveWord) (*SensitiveWord, error)
	QueryExcludedSymbol(context.Context, *Empty) (*ExcludedSymbol, error)
	AddExcludedSymbol(context.Context, *ExcludedSymbol) (*ExcludedSymbol, error)
	SetExcludedSymbol(context.Context, *ExcludedSymbol) (*ExcludedSymbol, error)
}

// UnimplementedSensitiveWordServer can be embedded to have forward compatible implementations.
type UnimplementedSensitiveWordServer struct {
}

func (*UnimplementedSensitiveWordServer) QuerySensitiveWord(ctx context.Context, req *Empty) (*SensitiveWord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySensitiveWord not implemented")
}
func (*UnimplementedSensitiveWordServer) AddSensitiveWord(ctx context.Context, req *SensitiveWord) (*SensitiveWord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSensitiveWord not implemented")
}
func (*UnimplementedSensitiveWordServer) SetSensitiveWord(ctx context.Context, req *SensitiveWord) (*SensitiveWord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSensitiveWord not implemented")
}
func (*UnimplementedSensitiveWordServer) QueryExcludedSymbol(ctx context.Context, req *Empty) (*ExcludedSymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExcludedSymbol not implemented")
}
func (*UnimplementedSensitiveWordServer) AddExcludedSymbol(ctx context.Context, req *ExcludedSymbol) (*ExcludedSymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExcludedSymbol not implemented")
}
func (*UnimplementedSensitiveWordServer) SetExcludedSymbol(ctx context.Context, req *ExcludedSymbol) (*ExcludedSymbol, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExcludedSymbol not implemented")
}

func RegisterSensitiveWordServer(s *grpc.Server, srv SensitiveWordServer) {
	s.RegisterService(&_SensitiveWord_serviceDesc, srv)
}

func _SensitiveWord_QuerySensitiveWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveWordServer).QuerySensitiveWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.SensitiveWord/QuerySensitiveWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveWordServer).QuerySensitiveWord(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensitiveWord_AddSensitiveWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensitiveWord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveWordServer).AddSensitiveWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.SensitiveWord/AddSensitiveWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveWordServer).AddSensitiveWord(ctx, req.(*SensitiveWord))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensitiveWord_SetSensitiveWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensitiveWord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveWordServer).SetSensitiveWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.SensitiveWord/SetSensitiveWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveWordServer).SetSensitiveWord(ctx, req.(*SensitiveWord))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensitiveWord_QueryExcludedSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveWordServer).QueryExcludedSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.SensitiveWord/QueryExcludedSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveWordServer).QueryExcludedSymbol(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensitiveWord_AddExcludedSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExcludedSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveWordServer).AddExcludedSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.SensitiveWord/AddExcludedSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveWordServer).AddExcludedSymbol(ctx, req.(*ExcludedSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensitiveWord_SetExcludedSymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExcludedSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensitiveWordServer).SetExcludedSymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.SensitiveWord/SetExcludedSymbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensitiveWordServer).SetExcludedSymbol(ctx, req.(*ExcludedSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensitiveWord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orderer.SensitiveWord",
	HandlerType: (*SensitiveWordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuerySensitiveWord",
			Handler:    _SensitiveWord_QuerySensitiveWord_Handler,
		},
		{
			MethodName: "AddSensitiveWord",
			Handler:    _SensitiveWord_AddSensitiveWord_Handler,
		},
		{
			MethodName: "SetSensitiveWord",
			Handler:    _SensitiveWord_SetSensitiveWord_Handler,
		},
		{
			MethodName: "QueryExcludedSymbol",
			Handler:    _SensitiveWord_QueryExcludedSymbol_Handler,
		},
		{
			MethodName: "AddExcludedSymbol",
			Handler:    _SensitiveWord_AddExcludedSymbol_Handler,
		},
		{
			MethodName: "SetExcludedSymbol",
			Handler:    _SensitiveWord_SetExcludedSymbol_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orderer/sensitive_words.proto",
}
